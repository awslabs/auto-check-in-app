# Auto Check-in App 
#
# template for auto-check-in-app
# **DO NOT DELETE**
#
# author: hariby@, kiiwami@, midaisuk@, okunotom@, iizus@
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: (SO0068) - Auto Check-in App 

Parameters:
  RegistrationBucketNamePrefix:
    Type: String
    AllowedPattern: '[a-z][a-z0-9-]*[a-z0-9]*'
    Default: 'auto-check-in-app-register'
    Description: Prefix of Amazon S3 bucket for Auto Check-in user registration. The bucket name will be RegistrationBucketNamePrefix-<RegionName>-<AccountID>

  RekognitionCollectionName:
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-]*[a-z0-9]*'
    Default: 'auto-check-in-app-face-collection'
    Description: Name of Amazon DynamoDB table to hold face metadata

  RekognitionFaceSimilarityThreshold:
    Type: Number
    MaxValue: 100
    MinValue: 80
    Default: 94
    Description: Rekognition similarity threshold for face authentication

  LogLevel: 
    Type: String
    Default: INFO
    AllowedValues: 
      - CRITICAL
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      - NOTSET
    Description: Log level for Lambda functions. Choose from {CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET}. 

Mappings:
  MetricsMap:
    Send-Data:
      SendAnonymousData: "Yes" # change to 'No' if needed

  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
      
Resources:
  # IAM execution role for IndexFaceLambda Lambda function
  IndexFaceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CloudWatchLogsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AutoCheckinAppLogGroup}:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-IndexFace:*"
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
            Resource:
              !Sub "arn:aws:s3:::${RegistrationBucketNamePrefix}-${AWS::Region}-${AWS::AccountId}/*"
      - PolicyName: RekognitionAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - rekognition:IndexFaces
            Resource: !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/${RekognitionCollectionName}"
      - PolicyName: DynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              !GetAtt DynamoDBTable.Arn

  IndexFaceLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Triggered by S3, indexes faces against a collection in Amazon Rekognition
      FunctionName: !Sub "${AWS::StackName}-IndexFace"
      CodeUri: 
        Bucket: !Sub "%%BUCKET_NAME%%-${AWS::Region}"
        Key: %%SOLUTION_NAME%%/%%VERSION%%/index-face-lambda.zip
      Handler: function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IndexFaceLambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          RekognitionCollectionName: !Ref RekognitionCollectionName
          DynamoDBTableName: !Ref DynamoDBTable
          LogLevel: !Ref LogLevel
          SendAnonymousData: !FindInMap [MetricsMap, Send-Data, SendAnonymousData]

  CreateCollectionLambdaExecutionRole:
    # IAM execution role for CreateCollectionLambda Lambda function
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: RekognitionAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - rekognition:CreateCollection
              - rekognition:DeleteCollection
              - rekognition:ListCollections
            Resource: !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/${RekognitionCollectionName}"
      - PolicyName: CloudWatchLogsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AutoCheckinAppLogGroup}:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-CreateCollection:*"

  CreateCollectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Custom resource function to create Rekognition collection
      FunctionName: !Sub "${AWS::StackName}-CreateCollection"
      CodeUri: 
        Bucket: !Sub "%%BUCKET_NAME%%-${AWS::Region}"
        Key: %%SOLUTION_NAME%%/%%VERSION%%/create-collection-lambda.zip
      Handler: function.lambda_handler
      Role: !GetAtt CreateCollectionLambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      Environment: 
        Variables: 
          LogLevel: !Ref LogLevel
          SendAnonymousData: !FindInMap [MetricsMap, Send-Data, SendAnonymousData]

  CreateCollectionCustomResource:
    Type: "Custom::CreateCollection"
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt CreateCollectionLambda.Arn
      RekognitionCollectionName: !Ref RekognitionCollectionName

  RekognizeFaceLambdaExecutionRole:
    # IAM execution role for RekognizeFaceLambdaExecutionRole Lambda function
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: DynamoDBReadOnlyAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt DynamoDBTable.Arn
      - PolicyName: DynamoDBUpdateItem
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: !GetAtt DynamoDBTable.Arn
      - PolicyName: RekognitionAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - rekognition:SearchFacesByImage
            Resource: !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/${RekognitionCollectionName}"
      - PolicyName: CloudWatchLogsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AutoCheckinAppLogGroup}:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-RekognizeFace:*"

  RekognizeFaceLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Facial recognition API
      FunctionName: !Sub "${AWS::StackName}-RekognizeFace"
      CodeUri: 
        Bucket: !Sub "%%BUCKET_NAME%%-${AWS::Region}"
        Key: %%SOLUTION_NAME%%/%%VERSION%%/rekognize-face-lambda.zip
      Handler: function.lambda_handler
      Role: !GetAtt RekognizeFaceLambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 10
      Environment:
        Variables:
          RekognitionCollectionName: !Ref RekognitionCollectionName
          DynamoDBTableName: !Ref DynamoDBTable
          RekognitionFaceSimilarityThreshold: !Ref RekognitionFaceSimilarityThreshold
          LogLevel: !Ref LogLevel
          SendAnonymousData: !FindInMap [MetricsMap, Send-Data, SendAnonymousData]
      Events:
        RekognizeFaceApi:
          Type: Api
          Properties:
            RestApiId: !Ref RekognizeFaceApi
            Path: /rekognize_face
            Method: POST

  RekognizeFaceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "RekognizeFaceApi"
        x-amazon-apigateway-request-validators : {
          BasicValidator : {
            validateRequestBody : true,
            validateRequestParameters : true,
            validateRequestHeaders : true
          }
        }
        x-amazon-apigateway-request-validator : BasicValidator
        paths:
          /rekognize_face:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RekognizeFaceLambda.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                httpMethod: "POST"
                type: "aws_proxy"
        x-amazon-apigateway-binary-media-types:
          - "image/jpg"
      MethodSettings: 
        - 
          ResourcePath: /rekognize_face
          HttpMethod: POST
          ThrottlingRateLimit: 1000
          ThrottlingBurstLimit: 500
        

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "RekognitionId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "RekognitionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "10"
      SSESpecification:
        SSEEnabled: true

  RegistrationBucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - InvokeFunctionIndexFaceLambdaPermission
    Properties:
      BucketName: !Sub "${RegistrationBucketNamePrefix}-${AWS::Region}-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter: 
              S3Key: 
                Rules: 
                  - Name: suffix
                    Value: jpg
            Function: !GetAtt IndexFaceLambda.Arn
          - Event: s3:ObjectCreated:*
            Filter: 
              S3Key: 
                Rules: 
                  - Name: suffix
                    Value: jpeg
            Function: !GetAtt IndexFaceLambda.Arn
          - Event: s3:ObjectCreated:*
            Filter: 
              S3Key: 
                Rules: 
                  - Name: suffix
                    Value: png
            Function: !GetAtt IndexFaceLambda.Arn
      # self logging is usuannly not recommended
      LoggingConfiguration:
        DestinationBucketName: 
          !Sub "${RegistrationBucketNamePrefix}-${AWS::Region}-${AWS::AccountId}"
        LogFilePrefix: log/
      AccessControl: LogDeliveryWrite

  InvokeFunctionIndexFaceLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt IndexFaceLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${RegistrationBucketNamePrefix}-${AWS::Region}-${AWS::AccountId}"
      SourceAccount: !Ref 'AWS::AccountId'

  AutoCheckinAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws-solutions/auto-check-in-app/gate"

  AutoCheckinAppDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'Auto_Check-in_App_${AWS::Region}'
      DashboardBody: { "Fn::Join": [ "", ['
      {
        "widgets": [
          {
            "type": "metric",
            "x": 0,
            "y": 0,
            "width": 12,
            "height": 6,
            "properties": {
              "view": "timeSeries",
              "stacked": false,
              "metrics": [
                [
                  "AWS/Rekognition",
                  "ResponseTime",
                  "Operation",
                  "SearchFacesByImage"
                ]
              ],
              "region": "',{"Fn::Sub" : "${AWS::Region}"},'",
              "title": "Rekognition ResponseTime",
              "period": 300
            }
          },
          {
            "type": "metric",
            "x": 12,
            "y": 0,
            "width": 12,
            "height": 6,
            "properties": {
              "metrics": [
                [ "AWS/DynamoDB", "SuccessfulRequestLatency", "TableName","',{"Ref":"DynamoDBTable"},'", "Operation", "GetItem" ]
              ],
              "view": "timeSeries",
              "stacked": false,
              "region": "',{"Fn::Sub" : "${AWS::Region}"},'",
              "period": 300,
              "title": "DynamoDB SuccessfulRequestLatency"
            }
          },
          {
            "type": "metric",
            "x": 0,
            "y": 6,
            "width": 12,
            "height": 3,
            "properties": {
              "metrics": [
                [ "AWS/Rekognition", "UserErrorCount", "Operation", "SearchFacesByImage", { "color": "#d62728" } ],
                [ ".", "SuccessfulRequestCount", ".", ".", { "color": "#1f77b4" } ]
              ],
              "view": "timeSeries",
              "stacked": true,
              "stat": "Sum",
              "region": "',{"Fn::Sub" : "${AWS::Region}"},'",
              "period": 300,
              "title": "Rekognition SuccessCount"
            }
          },
          {
            "type": "metric",
            "x": 0,
            "y": 9,
            "width": 6,
            "height": 3,
            "properties": {
              "view": "singleValue",
              "metrics": [
                [
                  "AWS/Rekognition",
                  "ResponseTime",
                  "Operation",
                  "SearchFacesByImage"
                ]
              ],
              "region": "',{"Fn::Sub" : "${AWS::Region}"},'",
              "title": "Rekognition SearchFaces",
              "period": 300
            }
          },
          {
            "type": "metric",
            "x": 6,
            "y": 9,
            "width": 6,
            "height": 3,
            "properties": {
              "view": "singleValue",
              "metrics": [
                [
                  "AWS/DynamoDB",
                  "SuccessfulRequestLatency",
                  "TableName",
                  "',{"Ref" : "DynamoDBTable"},'",
                  "Operation",
                  "GetItem"
                ]
              ],
              "region": "',{"Fn::Sub" : "${AWS::Region}"},'",
              "title": "DynamoDB GetItem",
              "period": 300
            }
          },
          {
            "type": "metric",
            "x": 12,
            "y": 6,
            "width": 12,
            "height": 6,
            "properties": {
              "view": "timeSeries",
              "stacked": false,
              "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "RekognizeFaceApi" ]
              ],
              "region": "',{"Fn::Sub" : "${AWS::Region}"},'",
              "title": "API GW Latency",
              "period": 300
            }
          }
        ]
      }']]}

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "auto-check-in-users"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
      
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}Users-client"
      GenerateSecret: false
      RefreshTokenValidity: 1
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

Outputs:
  DynamoDBTableName:
    Value: !Ref DynamoDBTable
    Description: Name of the DynamoDB table
  RekognitionCollectionName:
    Value: !Ref RekognitionCollectionName
    Description: Name of the Rekognition collection
  RegistrationBucketName:
    Value: !Sub "${RegistrationBucketNamePrefix}-${AWS::Region}-${AWS::AccountId}"
    Description: Name of the S3 bucket
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Description: Cognito User Pool ID
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Description: Cognito User Pool Client ID
  RekognizeFaceApi: 
    Value: !Ref RekognizeFaceApi
    Description: API Gateway resource ID 
